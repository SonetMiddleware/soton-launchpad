import {Address, beginCell, Cell, Dictionary, Slice} from "ton";

import {Sha256} from "@aws-crypto/sha256-js";
import BN from "bn.js";

// https://github.com/SonetMiddleware/ton-token-contract/tree/main/ft
const minterHex = 'B5EE9C7241020E010002A3000114FF00F4A413F4BCF2C80B0102016202030202CC040502037A600C0D01F5D906380492F81F000E8698180B8D8492F81F07D207D2018FD0018B8EB90FD0018FD001839D4DA0001698FE99FF6A2687D0' +
  '07D206A6A18400AA9385D47199A9A9B1B289A6382F97024817D207D006A18106840306B90FD001812881A282178048A502819E428027D012C678B666664F6AA7041083DEECBEF29385D4060093B3F0508806E0A84026A8280790A009' +
  'F404B19E2C039E2D99924591960225E801E80196019241F200E0E9919605940F97FF93A0EF003191960AB19E2CA009F4042796D625999992E3F60104F48EE036373701FA00FA40F82854120670542013541403C85004FA0258CF1601' +
  'CF16CCC922C8CB0112F400F400CB00C9F9007074C8CB02CA07CBFFC9D05006C705F2E04AA1034545C85004FA0258CF16CCCCC9ED5401FA403020D70B01C300915BE30DE082102C76B9735270BAE30235373723C003E3023502C00407' +
  '08090A003E8210D53276DB708010C8CB055003CF1622FA0212CB6ACB1FCB3FC98042FB0001FE365F03820898968015A015BCF2E04B02FA40D3003095C821CF16C9916DE28210D1735400708018C8CB055005CF1624FA0214CB6A13CB' +
  '1F14CB3F23FA443070BA8E33F828440370542013541403C85004FA0258CF1601CF16CCC922C8CB0112F400F400CB00C9F9007074C8CB02CA07CBFFC9D0CF16966C227001CB01E2F4000B0034335035C705F2E04903FA403059C85004' +
  'FA0258CF16CCCCC9ED5400428E185124C705F2E049D4304300C85004FA0258CF16CCCCC9ED54E05F05840FF2F0000AC98040FB00007DADBCF6A2687D007D206A6A183618FC1400B82A1009AA0A01E428027D012C678B00E78B666491646580897A007A00658064FC80383A6465816503E5FFE4E840001FAF16F6A2687D007D206A6A183FAA9040349FFD63';
const walletHex = 'B5EE9C7241021201000334000114FF00F4A413F4BCF2C80B0102016202030202CC0405001BA0F605DA89A1F401F481F481A8610201D40607020148080900C30831C02497C138007434C0C05C6C2544D7C0FC02F83E903E900C7E800C' +
  '5C75C87E800C7E800C1CEA6D0000B4C7E08403E29FA954882EA54C4D167C0238208405E3514654882EA58C511100FC02780D60841657C1EF2EA4D67C02B817C12103FCBC2000113E910C1C2EBCB853600201200A0B020120101101F1' +
  '00F4CFFE803E90087C007B51343E803E903E90350C144DA8548AB1C17CB8B04A30BFFCB8B0950D109C150804D50500F214013E809633C58073C5B33248B232C044BD003D0032C032483E401C1D3232C0B281F2FFF274013E903D010C' +
  '7E800835D270803CB8B11DE0063232C1540233C59C3E8085F2DAC4F3200C03F73B51343E803E903E90350C0234CFFE80145468017E903E9014D6F1C1551CDB5C150804D50500F214013E809633C58073C5B33248B232C044BD003D00' +
  '32C0327E401C1D3232C0B281F2FFF274140371C1472C7CB8B0C2BE80146A2860822625A020822625A004AD8228608239387028062849F8C3C975C2C070C008E00D0E0F00AE8210178D4519C8CB1F19CB3F5007FA0222CF165006CF16' +
  '25FA025003CF16C95005CC2391729171E25008A813A08208E4E1C0AA008208989680A0A014BCF2E2C504C98040FB001023C85004FA0258CF1601CF16CCC9ED5400705279A018A182107362D09CC8CB1F5230CB3F58FA025007CF1650' +
  '07CF16C9718010C8CB0524CF165006FA0215CB6A14CCC971FB0010241023000E10491038375F040076C200B08E218210D53276DB708010C8CB055008CF165004FA0216CB6A12CB1F12CB3FC972FB0093356C21E203C85004FA0258CF' +
  '1601CF16CCC9ED5400DB3B51343E803E903E90350C01F4CFFE803E900C145468549271C17CB8B049F0BFFCB8B0A0823938702A8005A805AF3CB8B0E0841EF765F7B232C7C572CFD400FE8088B3C58073C5B25C60063232C14933C59C' +
  '3E80B2DAB33260103EC01004F214013E809633C58073C5B3327B55200083200835C87B51343E803E903E90350C0134C7E08405E3514654882EA0841EF765F784EE84AC7CB8B174CFCC7E800C04E81408F214013E809633C58073C5B3327B552093150AD4';


export const JETTON_WALLET_CODE = Cell.fromBoc(Buffer.from(walletHex, 'hex'))[0];
export const JETTON_MINTER_CODE = Cell.fromBoc(Buffer.from(minterHex, 'hex'))[0]; // code cell from build output

const ONCHAIN_CONTENT_PREFIX = 0x00;
const SNAKE_PREFIX = 0x00;

// This is example data - Modify these params for your own jetton!
// - Data is stored on-chain (except for the image data itself)
// - Owner should usually be the deploying wallet's address.
const jettonParams = {
  owner: Address.parse("EQD4gS-Nj2Gjr2FYtg-s3fXUvjzKbzHGZ5_1Xe_V0-GCp0p2"),
  name: "MyJetton",
  symbol: "JET1",
  image: "https://www.linkpicture.com/q/download_183.png", // Image url
  description: "My jetton",
};

export type JettonMetaDataKeys = "name" | "description" | "image" | "symbol";

const jettonOnChainMetadataSpec: {
  [key in JettonMetaDataKeys]: "utf8" | "ascii" | undefined;
} = {
  name: "utf8",
  description: "utf8",
  image: "ascii",
  symbol: "utf8",
};


export function jettonMinterInitData(
  owner: Address,
  metadata: { [s in JettonMetaDataKeys]?: string }
): Cell {
  return beginCell()
    .storeCoins(0)
    .storeAddress(owner)
    .storeRef(new Cell())
    .storeRef(JETTON_WALLET_CODE)
    .endCell();
}

// return the init Cell of the contract storage (according to load_data() contract method)
export function initData() {
  return jettonMinterInitData(jettonParams.owner, {
    name: jettonParams.name,
    symbol: jettonParams.symbol,
    image: jettonParams.image,
    description: jettonParams.description,
  });
}
